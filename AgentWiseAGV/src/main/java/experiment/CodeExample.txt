package experiment;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import javax.measure.unit.SI;

import com.github.rinde.rinsim.core.SimulatorAPI;
import com.github.rinde.rinsim.core.model.pdp.VehicleDTO;
import com.github.rinde.rinsim.core.model.road.RoadModelBuilders;
import com.github.rinde.rinsim.experiment.Experiment;
import com.github.rinde.rinsim.experiment.MASConfiguration;
import com.github.rinde.rinsim.geom.Point;
import com.github.rinde.rinsim.pdptw.common.AddVehicleEvent;
import com.github.rinde.rinsim.scenario.Scenario;
import com.github.rinde.rinsim.scenario.TimeOutEvent;
import com.github.rinde.rinsim.scenario.TimedEventHandler;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.MoreExecutors;

import multistage.GraphCreator;
import multistage.result.Result;
import multistage.result.Sample;
import setting.Setting;

public class ParExperiment {

  public static Scenario createScenario(Setting setting) {
    final GraphCreator graph = new GraphCreator(setting);
    Scenario s = Scenario.builder()
        .addModel(RoadModelBuilders.dynamicGraph(graph.createGraph())
            .withCollisionAvoidance().withDistanceUnit(SI.METER)
            .withVehicleLength(setting.getVehicleLength())
            .withSpeedUnit(SI.METERS_PER_SECOND).withMinDistance(0d))
        .addEvent(AddVehicleEvent.create(-1,
            VehicleDTO.builder().startPosition(new Point(0, 0)).build()))
        .addEvent(TimeOutEvent.create(60000))

    .instanceId("1agv-something").build();

    return s;

  }

  public static MASConfiguration createDMASConfig() {
    return MASConfiguration.builder()
        .addEventHandler(AddVehicleEvent.class, new AGVHandler())
        .addEventHandler(TimeOutEvent.class, TimeOutEvent.ignoreHandler())
        .build();
  }

  public static void setupExperiment() {

    Experiment.build(null).addConfiguration(createDMASConfig())
        .addScenario(createScenario(null)).withThreads(4).perform();
  }

  static class AGVHandler implements TimedEventHandler<AddVehicleEvent> {
    @Override
    public void handleTimedEvent(AddVehicleEvent event,
        SimulatorAPI simulator) {
      // simulator.register(new VehicleAgent(destinationList,
      // virtualEnvironment, agvID, centralStation, setting, result));
    }
  }

  static class ExperimentRunner implements Callable<Result> {

    final long seed;
    final int numAGV;

    public ExperimentRunner(long seed, int numAGV) {
      this.seed = seed;
      this.numAGV = numAGV;
    }

    @Override
    public Result call() throws Exception {
      // final long seed = seeds.removeFirst();
      // System.out.println("num of AGVs: " + (numAGV*10) + "\tSample: " + i +
      // "\tSeed: " + seed);
      final Setting setting = new Setting.SettingBuilder()
          .setNumOfAGVs(numAGV * 10).setSeed(seed).build();
      final multistage.delegatemas.AGVSystem agvSystem = new AGVSystem(setting);

      final Result result = agvSystem.run();
      // sample.addResult(result);
      return result;
    }

  }

  public static void main(String[] args) {
    LinkedList<Long> seeds = new LinkedList<>();

    ListeningExecutorService executor = MoreExecutors
        .listeningDecorator(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()));

    List<ListenableFuture<Result>> futures = new ArrayList<>();
    try {
      Scanner fileScanner = new Scanner(
          new File("src/main/resources/seeds.txt"));
      while (fileScanner.hasNextLine()) {
        seeds.add(fileScanner.nextLong());
      }
      fileScanner.close();

      List<Sample> samples = new ArrayList<>();

      for (int numAGV = 1; numAGV <= 10; numAGV++) {
        final Sample sample = new Sample(numAGV * 10);
        for (int i = 0; i < 5; i++) {
          futures.add(executor
              .submit(new ExperimentRunner(seeds.removeFirst(), numAGV)));
        }
        samples.add(sample);
      }

      print(samples);
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }

    try {
      executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    
    // TODO do something with results

    System.out.println("DONE!");
  }

  public static void print(List<Sample> samples) {
    try {
      PrintWriter printWriterMS = new PrintWriter(
          new File("src/main/resources/ResultsMultiDMAS.txt"));
      printWriterMS.println("numAGVs\tFinishedTask");
      for (Sample sample : samples) {
        List<Result> results = sample.getResults();
        for (Result result : results) {
          printWriterMS.println(sample.getNumOfAGVs() + "\t"
              + result.getNumOfReachedDestinations());
        }
      }
      printWriterMS.close();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

}
